#!/groovy
@Library('cx-jenkins-pipeline-kit') _
import java.time.*

def workspace
def vmName = "${BUILD_TAG}-CxSAST"
def vmTemplate90 = "CxSDLC-Template-CxSAST-9-0"
def ipAddress90
def ram = "12000"
def cpu = "4"
def provider = "VMWARE"
def decommissionPeriod = "3 hour"
def vmwareNetwork = "Lab"
def automationBranch = "9.0.0"

pipeline {
    parameters {
        string(name: "vmTemplate90",defaultValue: "${vmTemplate90}", description: "Template for 9.0 VM")
        string(name: "ram",defaultValue: "${ram}", description: "Server memory")
        string(name: "cpu",defaultValue: "${cpu}", description: "")
        string(name: "provider",defaultValue: "${provider}", description: "IAAS platform to be used")
        string(name: "decommissionPeriod",defaultValue: "${decommissionPeriod}", description: "Decommission period")
        string(name: "vmwareNetwork",defaultValue: "${vmwareNetwork}", description: "vmware network for new VMs")
        choice(name: 'automationBranch', choices: ['9.0.0', 'cd-add-resources'], description: 'automation branch')
    }
    agent { node { label 'CxSDLC-Slave-CxJenkinsPlugin' } }
    options {
        timestamps()
        timeout(time: 2, unit: 'HOURS')
        //skipDefaultCheckout()
    }
    stages {

        stage('Pipeline Info') {
            steps {
                script {
                    env.PIPELINE_STATUS = "Success"
                    env.STAGE_NAME_FAILED = "None"
                    workspace = pwd()
                    sh 'printenv'
                }
            }
        }
        
        stage('Build CxJenkins') {
            steps {
                script {
                    sh "docker run --rm --name build-${BUILD_TAG} -v ${workspace}:/usr/src/cx-jenkins -v /root/.gradle:/root/.gradle -w /usr/src/cx-jenkins maven:3.6.1-jdk-8-alpine ./gradlew -x test clean jpi"
                }
            }
            post {
                failure {
                    script {
                        env.PIPELINE_STATUS = "Failure"
                        env.STAGE_NAME_FAILED="${STAGE_NAME}"
                    }
                }
            }
        }
        
        stage('Test CxJenkins') {
            steps {
                script {
                    sh "docker run --rm --name test-${BUILD_TAG} -v ${workspace}:/usr/src/cx-jenkins -v /root/.gradle:/root/.gradle -w /usr/src/cx-jenkins maven:3.6.1-jdk-8-alpine ./gradlew test"
                }
            }
            post {
                failure {
                    script {
                        env.PIPELINE_STATUS = "Failure"
                        env.STAGE_NAME_FAILED="${STAGE_NAME}"
                    }
                }
            }
        }

        stage('System Tests') {
            when {
                expression {
                    BRANCH_NAME == 'master' || BRANCH_NAME.startsWith("PR-") && CHANGE_TARGET == 'master' || BRANCH_NAME == 'add-ci-cd'
                }
            }
            parallel {

                stage('9.0') {
                    stages {
                        stage('Create CxSAST VM') {
                            steps {
                                script {
                                    kit.Create_Vm_Terraform(vmName + "-9.0", vmTemplate90, ram, cpu, provider, decommissionPeriod, "Auto", "Plugins-CI", vmwareNetwork)
                                    ipAddress90 = kit.getIpAddress(vmName + "-9.0", provider)
                                    node('install01') {
                                        kit.Create_Jenkins_Slave_On_Master(vmName + "-9.0")
                                        kit.Start_Jenkins_Slave_On_Windows_Pstools(ipAddress90, vmName + "-9.0")
                                    }
                                }
                            }
                        }

                        parallel {

                            stage('Jenkins Java 8') {
                                stages {
                                    stage('Stage 1') {
                                        steps {
                                            script {
                                                echo "Stage 1"
                                            }
                                        }
                                    }
                                    stage('Stage 2') {
                                        steps {
                                            script {
                                                echo "Stage 2"
                                            }
                                        }
                                    }
                                }
                            }

                            stage('Jenkins Java 11') {
                                stages {
                                    stage('Stage 1') {
                                        steps {
                                            script {
                                                echo "Stage 1"
                                            }
                                        }
                                    }
                                    stage('Stage 2') {
                                        steps {
                                            script {
                                                echo "stage 2"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        /*stage('Pull Automation Code') {
                            steps {
                                dir("${workspace}/9.0/Checkmarx-System-Test") {
                                    git branch: automationBranch, credentialsId: '15f8e7b7-6ce7-44c0-b151-84f99ffa7aed', poll: false, url: 'http://tfs2013:8080/tfs/DefaultCollection/Automation/_git/Checkmarx-System-Test'
                                    sh "cp -r ../../../env ."
                                    sh "sed -e 's/<CxSastIpAddress>/${ipAddress90}/g' -i ./env/topology.xml"
                                }
                            }
                        }
                        stage('Plugins API Sanity Test') {
                            steps {
                                dir("${workspace}/9.0/Checkmarx-System-Test") {
                                    sh "docker run --rm --name plugins-api-sanity-test-9.0-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/9.0/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation --add-host WIN2012-ENV9-B:${ipAddress90} maven:3.6.1-jdk-8-alpine \
                                        mvn -q clean test -Dcxcommon.version=${env.cxCommonVersion} -Dsast.version=9.0 -Dtest=com.cx.automation.plugin.test.cxcommonclient.sanity.* -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=false -DskipTests=false"
                                }
                            }
                        }
                        stage('Plugins API Smoke Tests') {
                            steps {
                                dir("${workspace}/9.0/Checkmarx-System-Test") {
                                    sh "docker run --rm --name plugins-api-smoke-tests-9.0-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/9.0/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation --add-host WIN2012-ENV9-B:${ipAddress90} maven:3.6.1-jdk-8-alpine \
                                        mvn -q test -Dcxcommon.version=${env.cxCommonVersion} -Dsast.version=9.0 -Dtest=com.cx.automation.plugin.test.cxcommonclient.PluginsCxSASTSmokeTests,com.cx.automation.plugin.test.cxcommonclient.PluginsCxMandOAndOSASmokeTests \
                                            -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=false -DskipTests=false"
                                }
                            }
                        }
                        stage('Plugins CxCommonClient All Tests') {
                            steps {
                                dir("${workspace}/9.0/Checkmarx-System-Test") {
                                    sh "docker run --rm --name plugins-cxcommonclient-all-tests-9.0-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/9.0/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation --add-host WIN2012-ENV9-B:${ipAddress90} maven:3.6.1-jdk-8-alpine \
                                        mvn -q test -Dcxcommon.version=${env.cxCommonVersion} -Dsast.version=9.0 -Dtest=com.cx.automation.plugin.test.cxcommonclient.scan.*,com.cx.automation.plugin.test.cxcommonclient.osa.* \
                                            -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=false -DskipTests=false"
                                }
                            }
                        }*/
                    }
                    post {
                        always {
                            script {
                                //dir("${workspace}/9.0/Checkmarx-System-Test") {
                                //    junit '**/PluginsCommonClient/target/surefire-reports/**/*.xml'
                                //}
                                if (ipAddress90 != null) {
                                    /*node(vmName + "-9.0") {
                                        kit.zipStashInstallationLogs("CxSAST-9.0-Logs")
                                    }
                                    unstash "CxSAST-9.0-Logs"*/
                                    deleteVm(provider, ipAddress90, vmName + "-9.0")
                                }
                            }
                        }
                        failure {
                            script {
                                env.PIPELINE_STATUS = "Failure"
                                env.STAGE_NAME_FAILED="${STAGE_NAME}"
                            }
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts "*.zip, build/libs/*.hpi"
            /*script {
                try {
                    kit.Command_Execution_Sh("jq -n env > env.json")
                    kit.Command_Execution_Sh("curl -sb -k -v -H \"Content-type: application/json\" -XPOST http://cx-elastic01:9200/cx-client-common/_doc -d @env.json")
                } catch (Exception e) {
                    kit.Warning_Msg("The message couldn't be pushed to elastic, error:\n" + e.toString())
                }
            }*/
        }
        cleanup {
            cleanWs()
        }
    }
}
