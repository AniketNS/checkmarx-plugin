#!/groovy
@Library('cx-jenkins-pipeline-kit') _
import java.time.*

def workspace
def vmName = "${BUILD_TAG}-CxSAST"
def vmTemplate90 = "CxSDLC-Template-CxSAST-9-0"
def ipAddress90
def ram = "12000"
def cpu = "4"
def provider = "VMWARE"
def decommissionPeriod = "3 hour"
def vmwareNetwork = "Lab"
def automationBranch = "9.0.0"

def performParallelStages(String sastVer, String sastIP, String jenkinsVer) {
    workspace = pwd()
    /*stage("Build-Jenkins-${jenkinsVer}-CxSAST-${sastVer}") {
        echo "Building Jenkins [${jenkinsVer}] on CxSAST [${sastVer}]"
        sh "sleep 10"
    }
    stage("Deploy-Jenkins-${jenkinsVer}-CxSAST-${sastVer}") {
        echo "Deploying Jenkins ${jenkinsVer}] on CxSAST [${sastVer}]"
        sh "sleep 10"
    }
    stage("Test-Jenkins-${jenkinsVer}-CxSAST-${sastVer}") {
        echo "Testing Jenkins [${jenkinsVer}] on CxSAST [${sastVer}]"
        sh "sleep 10"
    }*/
    stage("Deploy-Jenkins-${jenkinsVer}-for-CxSAST-${sastVer}") {
        echo "Deploying Jenkins [${jenkinsVer}] for CxSAST [${sastVer}]"
        sh "cp -R /var/jenkins/workspace/jenkins-${jenkinsVer} ${workspace}/jenkins-${jenkinsVer}"
        sh "docker run --rm -d -P --name jenkins-${jenkinsVer}-sast-${sastVer}-${BUILD_TAG} -v ${workspace}/jenkins-${jenkinsVer}:/var/jenkins_home jenkins/jenkins:${jenkinsVer}"
        sh "docker ps -a"
        def port = sh (returnStdout: true, script: "docker port jenkins-${jenkinsVer}-sast-${sastVer}-${BUILD_TAG} 8080").substring(8).trim()
        echo "PORT: ${port}"
    }
}

pipeline {
    parameters {
        string(name: 'sastVersions', defaultValue: '8.9,9.0,9.2', description: 'Nodes to build, deploy and test')
        string(name: 'jenkinsVersions', defaultValue: 'jenkins01,jenkins02', description: 'App names')
        string(name: "vmTemplate90",defaultValue: "${vmTemplate90}", description: "Template for 9.0 VM")
        string(name: "ram",defaultValue: "${ram}", description: "Server memory")
        string(name: "cpu",defaultValue: "${cpu}", description: "")
        string(name: "provider",defaultValue: "${provider}", description: "IAAS platform to be used")
        string(name: "decommissionPeriod",defaultValue: "${decommissionPeriod}", description: "Decommission period")
        string(name: "vmwareNetwork",defaultValue: "${vmwareNetwork}", description: "vmware network for new VMs")
        choice(name: 'automationBranch', choices: ['9.0.0', 'cd-add-resources'], description: 'automation branch')
    }
    agent { node { label 'CxSDLC-Slave-CxJenkinsPlugin' } }
    options {
        timestamps()
        timeout(time: 2, unit: 'HOURS')
        //skipDefaultCheckout()
    }
    stages {

        stage('Pipeline Info') {
            steps {
                script {
                    env.PIPELINE_STATUS = "Success"
                    env.STAGE_NAME_FAILED = "None"
                    workspace = pwd()
                    sh 'printenv'
                }
            }
        }

        stage('Build CxJenkins') {
            steps {
                script {
                    sh "docker run --rm --name build-${BUILD_TAG} -v ${workspace}:/usr/src/cx-jenkins -v /root/.gradle:/root/.gradle -w /usr/src/cx-jenkins maven:3.6.1-jdk-8-alpine ./gradlew -x test clean jpi"
                }
            }
            post {
                failure {
                    script {
                        env.PIPELINE_STATUS = "Failure"
                        env.STAGE_NAME_FAILED = "${STAGE_NAME}"
                    }
                }
            }
        }

        stage('Test CxJenkins') {
            steps {
                script {
                    sh "docker run --rm --name test-${BUILD_TAG} -v ${workspace}:/usr/src/cx-jenkins -v /root/.gradle:/root/.gradle -w /usr/src/cx-jenkins maven:3.6.1-jdk-8-alpine ./gradlew test"
                }
            }
            post {
                failure {
                    script {
                        env.PIPELINE_STATUS = "Failure"
                        env.STAGE_NAME_FAILED = "${STAGE_NAME}"
                    }
                }
            }
        }

        /*stage('Create CxSAST 9.0 VM') {
            when {
                expression {
                    BRANCH_NAME == 'master' || BRANCH_NAME.startsWith("PR-") && CHANGE_TARGET == 'master' || BRANCH_NAME == 'add-ci-cd'
                }
            }
            steps {
                script {
                    kit.Create_Vm_Terraform(vmName + "-9.0", vmTemplate90, ram, cpu, provider, decommissionPeriod, "Auto", "Plugins-CI", vmwareNetwork)
                    ipAddress90 = kit.getIpAddress(vmName + "-9.0", provider)
                    node('install01') {
                        kit.Create_Jenkins_Slave_On_Master(vmName + "-9.0")
                        kit.Start_Jenkins_Slave_On_Windows_Pstools(ipAddress90, vmName + "-9.0")
                    }
                }
            }
        }*/

        stage('parallel stage') {
            steps {
                script {
                    /*def sasts = [:]
                    for (sast in params.sastVersions.tokenize(',')) {
                        def jenkinses = [:]
                        sasts[sast] = {
                            for (jenkins in params.jenkinsVersions.tokenize(',')) {
                                jenkinses[jenkins] = { performParallelStages(sast, jenkins) }
                            }
                        }
                        parallel jenkinses
                    }
                    parallel sasts*/
                    /*def myStages = [performParallelStages("sast1", "jenkins1"),performParallelStages("sast2", "jenkins2")]
                    parallel myStages*/
                    def parallelTopLevelSteps = [:]

                    /*parallelTopLevelSteps['8.9'] = {
                        def parallelNestedSteps = [:]

                        parallelNestedSteps['Jenkins01'] = { performParallelStages("8.9", "Jenkins01") }
                        parallelNestedSteps['Jenkins02'] = { performParallelStages("8.9", "Jenkins02") }
                        parallelNestedSteps['Jenkins03'] = { performParallelStages("8.9", "Jenkins03") }
                        parallelNestedSteps['Jenkins04'] = { performParallelStages("8.9", "Jenkins04") }

                        parallel(parallelNestedSteps)
                    }*/

                    parallelTopLevelSteps['9.0'] = {
                        def parallelNestedSteps = [:]

                        parallelNestedSteps['9.0-lts-jdk8'] = { performParallelStages("9.0", ipAddress90,"lts") }
                        parallelNestedSteps['9.0-lts-jdk11'] = { performParallelStages("9.0", ipAddress90,"lts-jdk11") }
                        //parallelNestedSteps['Jenkins03'] = { performParallelStages("9.0", ipAddress90,"Jenkins03") }
                        //parallelNestedSteps['Jenkins04'] = { performParallelStages("9.0", ipAddress90,"Jenkins04") }

                        parallel(parallelNestedSteps)
                    }

                    parallel(parallelTopLevelSteps)
                }
            }
        }

        /*stage('Jenkins Instance') {
            parallel {

                stage('Java 8') {
                    stages {
                        stage('Stage 1') {
                            steps {
                                script {
                                    echo "Stage 1"
                                }
                            }
                        }
                        stage('Stage 2') {
                            steps {
                                script {
                                    echo "Stage 2"
                                }
                            }
                        }
                    }
                }

                stage('Java 11') {
                    stages {
                        stage('Stage 1') {
                            steps {
                                script {
                                    echo "Stage 1"
                                }
                            }
                        }
                        stage('Stage 2') {
                            steps {
                                script {
                                    echo "stage 2"
                                }
                            }
                        }
                    }
                }
            }
        }*/
    }
    
    post {
        always {
            archiveArtifacts "*.zip, build/libs/*.hpi"
            script {
                //dir("${workspace}/9.0/Checkmarx-System-Test") {
                //    junit '**/PluginsCommonClient/target/surefire-reports/**/*.xml'
                //}
                if (ipAddress90 != null) {
                    /*node(vmName + "-9.0") {
                                kit.zipStashInstallationLogs("CxSAST-9.0-Logs")
                            }
                            unstash "CxSAST-9.0-Logs"*/
                    deleteVm(provider, ipAddress90, vmName + "-9.0")
                }
                /*try {
                    kit.Command_Execution_Sh("jq -n env > env.json")
                    kit.Command_Execution_Sh("curl -sb -k -v -H \"Content-type: application/json\" -XPOST http://cx-elastic01:9200/cx-client-common/_doc -d @env.json")
                } catch (Exception e) {
                    kit.Warning_Msg("The message couldn't be pushed to elastic, error:\n" + e.toString())
                }*/
            }
        }
        cleanup {
            cleanWs()
        }
    }
}
